<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat corp|| chat room</title>
    <link rel="stylesheet" href="/css/all.min.css">
    <link rel="stylesheet" href="/css/private.css">
    <link rel="icon" type="image/svg" href="Image-109992454066564565404-1-iVBOR.png">
</head>
<body>
    <header>
        <h1>chat room</h1>
        <h2><%= receiverUsername %></h2>
        <img src="<%=receiverProfilePic %>" alt="profile picture">
    </header>
    <main id="main">
        <div id="messages">
            <% roomMessages.forEach((message)=>{ %>
                <div class="message-content <%= message.senderId === userName ? 'sender-me': 'sender-others' %>" id="message-content">
                    <div class="chat-message">
                        <p class="message-sender"><%= message.senderId %></p>
                        <p class="message-text"><%=message.message %></p>
                        <a href="<%=message.imgUrl %>"><img src="<%=message.imgUrl %>" alt="" id="message-image"></a>
                        <p class="timeStamp"><%=message.timestamp %></p>
                    </div>
                </div>
           <% }) %>
        </div>
        <form onsubmit="sendMessage()" enctype="multipart/form-data">
          <textarea id="message-input" cols="100" rows="2" placeholder="your message"></textarea>
          <input type="file" name="file" id="file"  accept="image/*">
          <button id="sendBtn" type="submit"><i class="fas fa-paper-plane fa-1.6x" id="arrow-down"></i></button>
         </form>
    </main>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        const socket = io();
const roomId= '<%= roomId %>';
const username= '<%= userName %>'
const token= '<%= token %>'



// joining the room on load
socket.emit('join room', {roomId, username, token});


//send messages
const messageInput = document.getElementById('message-input');
const sendBtn = document.getElementById('sendBtn');

sendBtn.addEventListener('click', async (event) => {
  event.preventDefault();

  // Get the selected file
  const fileInput = document.getElementById('file');
  const file = fileInput.files[0];

  // Check if a file was selected
  if (file) {
    // Create a new form data object
    const formData = new FormData();
    formData.append('image', file);

    // Use Axios to upload the image to ImgBB
    const response = await axios.post('https://api.imgbb.com/1/upload', formData, {
      headers: {
        'content-type': 'multipart/form-data'
      },
      params: {
        key: '6ec3827f4865e3031a08d0cabde77286'
      }
    });

    // Get the image URL from the ImgBB API response
    const imageUrl = response.data.data.url;

    // Create the current date variable for the message
    let date= await new Date()
    const currentDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}  ${date.getHours()}:${date.getMinutes()}`;

    // Get the message text from the input field
    const message = messageInput.value;


    // Send the private message to the server
    socket.emit('private message', {
      message,
      roomId,
      username,
      token,
      currentDate,
      file: imageUrl
    });

    // Clear the message input field
    messageInput.value = '';
    fileInput.value="";
    window.location.reload();
  } else {
    // If no file was selected, send the message without an image
    // Create the current date variable for the message
    const date= await new Date();
    const currentDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}  ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;

    // Get the message text from the input field
    const message = messageInput.value;

    // Check if the message is empty
    if (message === '') {
      alert('The input is empty, please write a message');
      return;
    }

    // Send the private message to the server
    socket.emit('private message', {
      message,
      roomId,
      username,
      token,
      currentDate,
      file: null
    });

    // Clear the message input field
    messageInput.value = '';
    let messages=document.getElementById('messages')
    messages.scrollTop = messages.scrollHeight;
  }
});



let messages=document.getElementById('messages')
messages.scrollTop = messages.scrollHeight;
// receive a message from the server
socket.on('private message', (data)=>{
const messageDiv= document.createElement('div');
 messageDiv.classList.add('message-content');
 messageDiv.classList.add(data.senderId === username ? 'sender-me' : 'sender-others')

 const chatMessage = document.createElement('div')
 chatMessage.classList.add('chat-message');
 chatMessage.innerHTML = `<p class="message-sender">${data.senderId}</p>
 <p class="message-text">${data.message}</p>
 <a href="${data.imageUrl}"><img src="${data.imgUrl}" alt="" id="message-image"></a>
 <p class="timeStamp">${data.timestamp}`


messageDiv.appendChild(chatMessage);
messages.appendChild(messageDiv);
messages.scrollTop = messages.scrollHeight;
})
const main=document.getElementById('main');
main.scrollTop = main.scrollHeight;


    </script>
</body>
</html>